"""Compare two cached NV Access download snapshots.

This helper reads the JSON payloads generated by
``tools/audit_nvaccess_downloads.py`` and reports any differences between the
snapshots.  The comparison is incremental: we highlight new files, removed
entries, and metadata changes (size, modified timestamp, target) while grading
new/updated builds against the add-on's manifest and validated NVDA snapshot
metadata.

Example usage::

    python tools/compare_nvaccess_snapshots.py \
        --old docs/download_nvaccess_snapshot.json \
        --new docs/download_nvaccess_snapshot.json \
        --markdown docs/download_nvaccess_delta.md

The script prints a concise summary to stdout and can optionally emit JSON and
Markdown reports that feed long-running documentation workflows.
"""

from __future__ import annotations

import argparse
import json
import os
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, Iterable, List, Optional, Sequence, Tuple

from audit_nvaccess_downloads import (  # type: ignore[import]
    ListingEntry,
    ManifestInfo,
    Severity,
    classify_entry,
    load_manifest_info,
    load_validated_snapshots,
)


@dataclass
class SnapshotDiff:
    """Represents a change between the old and new snapshot."""

    change: str  # "added", "removed", or "modified"
    path: str
    new: Optional[ListingEntry]
    old: Optional[ListingEntry]
    severity: Optional[Severity]
    details: List[str]


def _parse_datetime(value: Optional[str]) -> Optional[datetime]:
    if not value:
        return None
    try:
        return datetime.fromisoformat(value)
    except ValueError:
        return None


def _entry_from_json(payload: Dict[str, object]) -> ListingEntry:
    size_field = payload.get("sizeBytes")
    size_bytes: Optional[int]
    if isinstance(size_field, (int, float)):
        size_bytes = int(size_field)
    elif isinstance(size_field, str):
        try:
            size_bytes = int(size_field)
        except ValueError:
            size_bytes = None
    else:
        size_bytes = None

    depth_field = payload.get("depth", 0)
    try:
        depth_value = int(depth_field)
    except (TypeError, ValueError):
        depth_value = 0

    entry_type = payload.get("entryType") or payload.get("entry_type") or ""

    return ListingEntry(
        path=str(payload.get("path") or ""),
        url=str(payload.get("url") or ""),
        name=str(payload.get("name") or ""),
        entry_type=str(entry_type),
        size_bytes=size_bytes,
        size_display=str(payload.get("sizeDisplay") or ""),
        modified=_parse_datetime(str(payload.get("modified"))) if payload.get("modified") else None,
        target=(str(payload.get("target")) if payload.get("target") not in {None, ""} else None),
        depth=depth_value,
    )


def load_snapshot(path: str) -> Dict[str, ListingEntry]:
    with open(path, "r", encoding="utf-8") as handle:
        data = json.load(handle)
    entries = {}
    for item in data.get("entries", []):
        entry = _entry_from_json(item)
        entries[entry.path] = entry
    return entries


def describe_metadata_changes(old: ListingEntry, new: ListingEntry) -> List[str]:
    changes: List[str] = []
    if old.entry_type != new.entry_type:
        changes.append(f"type {old.entry_type!r} → {new.entry_type!r}")
    if old.size_bytes != new.size_bytes:
        old_size = old.size_display or ("-" if old.entry_type == "dir" else "0 B")
        new_size = new.size_display or ("-" if new.entry_type == "dir" else "0 B")
        changes.append(f"size {old_size} → {new_size}")
    if (old.modified or datetime.min) != (new.modified or datetime.min):
        old_ts = old.modified.isoformat(sep=" ") if old.modified else "-"
        new_ts = new.modified.isoformat(sep=" ") if new.modified else "-"
        changes.append(f"modified {old_ts} → {new_ts}")
    if old.target != new.target:
        changes.append(f"target {old.target!r} → {new.target!r}")
    return changes


def calculate_diffs(
    old_entries: Dict[str, ListingEntry],
    new_entries: Dict[str, ListingEntry],
    manifest: ManifestInfo,
    validated_snapshots: Dict[str, str],
    current_nvda: Optional[str],
) -> List[SnapshotDiff]:
    diffs: List[SnapshotDiff] = []

    for path, entry in new_entries.items():
        if path not in old_entries:
            severity = classify_entry(entry, manifest, validated_snapshots, current_nvda)
            details = [
                f"new {entry.entry_type}",
                f"size {entry.size_display or '-'}",
            ]
            if entry.modified:
                details.append(f"modified {entry.modified.isoformat(sep=' ')}")
            diffs.append(
                SnapshotDiff(
                    change="added",
                    path=path,
                    new=entry,
                    old=None,
                    severity=severity,
                    details=details,
                )
            )

    for path, entry in old_entries.items():
        if path not in new_entries:
            diffs.append(
                SnapshotDiff(
                    change="removed",
                    path=path,
                    new=None,
                    old=entry,
                    severity=None,
                    details=[
                        f"removed {entry.entry_type}",
                        f"previous size {entry.size_display or '-'}",
                    ],
                )
            )

    for path in sorted(set(old_entries) & set(new_entries)):
        old_entry = old_entries[path]
        new_entry = new_entries[path]
        details = describe_metadata_changes(old_entry, new_entry)
        if details:
            severity = classify_entry(new_entry, manifest, validated_snapshots, current_nvda)
            diffs.append(
                SnapshotDiff(
                    change="modified",
                    path=path,
                    new=new_entry,
                    old=old_entry,
                    severity=severity,
                    details=details,
                )
            )

    def sort_key(diff: SnapshotDiff) -> Tuple[int, float, str]:
        severity_rank = {"high": 0, "medium": 1, "info": 2, "low": 3, "": 4}
        level = diff.severity.level if diff.severity else ""
        timestamp: Optional[datetime]
        if diff.new and diff.new.modified:
            timestamp = diff.new.modified
        elif diff.old and diff.old.modified:
            timestamp = diff.old.modified
        else:
            timestamp = None
        return severity_rank.get(level, 4), -(timestamp.timestamp() if timestamp else 0.0), diff.path

    diffs.sort(key=sort_key)
    return diffs


def render_markdown(diffs: Iterable[SnapshotDiff]) -> str:
    lines = ["# NV Access download delta", "", "| Change | Path | Severity | Details |", "| --- | --- | --- | --- |"]
    for diff in diffs:
        severity = diff.severity.level if diff.severity else ""
        notes = list(diff.details)
        if diff.severity:
            notes.append(diff.severity.reason)
        lines.append(
            "| {change} | `{path}` | {severity} | {details} |".format(
                change=diff.change,
                path=diff.path,
                severity=severity,
                details="; ".join(notes).replace("|", "\\|"),
            )
        )
    if len(lines) == 4:
        lines.append("| - | _No differences_ |  |  |")
    return "\n".join(lines) + "\n"


def diff_to_json(diffs: Iterable[SnapshotDiff]) -> Dict[str, object]:
    entries = []
    for diff in diffs:
        entry = {
            "change": diff.change,
            "path": diff.path,
            "details": diff.details,
        }
        if diff.severity:
            entry["severity"] = diff.severity.to_json()
        if diff.new:
            entry["new"] = diff.new.to_json()
        if diff.old:
            entry["old"] = diff.old.to_json()
        entries.append(entry)
    return {"differences": entries, "generated": datetime.now().isoformat()}


def main(argv: Optional[Sequence[str]] = None) -> int:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--old", required=True, help="Path to the older JSON snapshot")
    parser.add_argument("--new", required=True, help="Path to the newer JSON snapshot")
    parser.add_argument("--manifest", default="manifest.ini", help="Manifest path for severity grading")
    parser.add_argument(
        "--validated-snapshots",
        default="docs/validated_nvda_builds.json",
        help="JSON file describing last validated NVDA builds",
    )
    parser.add_argument("--current-nvda", help="Currently running NVDA build for severity context")
    parser.add_argument("--json", dest="json_path", help="Optional JSON output path")
    parser.add_argument("--markdown", dest="markdown_path", help="Optional Markdown output path")

    args = parser.parse_args(argv)

    old_entries = load_snapshot(args.old)
    new_entries = load_snapshot(args.new)

    manifest = load_manifest_info(args.manifest)
    validated = load_validated_snapshots(args.validated_snapshots)

    diffs = calculate_diffs(old_entries, new_entries, manifest, validated, args.current_nvda)

    if not diffs:
        print("No differences detected between snapshots.")
    else:
        for diff in diffs:
            severity = diff.severity.level if diff.severity else "-"
            timestamp = None
            if diff.new and diff.new.modified:
                timestamp = diff.new.modified.isoformat(sep=" ")
            elif diff.old and diff.old.modified:
                timestamp = diff.old.modified.isoformat(sep=" ")
            detail = "; ".join(diff.details)
            print(f"[{severity:>6}] {diff.change:>8} | {diff.path} | {detail}")
            if diff.severity:
                print(f"         -> {diff.severity.reason}")
            if timestamp:
                print(f"         -> timestamp {timestamp}")

    if args.json_path:
        payload = diff_to_json(diffs)
        directory = os.path.dirname(args.json_path)
        if directory:
            os.makedirs(directory, exist_ok=True)
        with open(args.json_path, "w", encoding="utf-8") as handle:
            json.dump(payload, handle, indent=2, sort_keys=True)

    if args.markdown_path:
        markdown = render_markdown(diffs)
        directory = os.path.dirname(args.markdown_path)
        if directory:
            os.makedirs(directory, exist_ok=True)
        with open(args.markdown_path, "w", encoding="utf-8") as handle:
            handle.write(markdown)

    return 0


if __name__ == "__main__":
    raise SystemExit(main())
